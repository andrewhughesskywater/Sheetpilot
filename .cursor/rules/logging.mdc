---
alwaysApply: true
---

# Rules

1. **Use Active Voice Only**
   - Write: "Could not connect to database"
   - Never: "Connection failed" or "Database connection was unsuccessful"

2. **Apply Consistent Tense Rules**
   - **States (present tense)**: "Database unavailable", "Credentials not found", "Update available"
   - **Completed actions (past tense)**: "Database initialized successfully", "Credentials stored successfully"
   - **Ongoing actions (present continuous)**: "Checking for updates", "Connecting to database", "Submitting timesheet"

3. **Use Specific Error Verbs**
   - Replace "Failed to [action]" with "Could not [action]"
   - Replace "Error occurred" with "Encountered error"
   - Replace "Was detected" with "Occurred"

4. **Avoid Passive Voice Constructions**
   - Write: "Server rejected request" not "Request was rejected"
   - Write: "User deleted file" not "File was deleted"
   - Write: "Application handled rejection" not "Rejection was handled"

5. **Be Specific and Actionable**
   - Avoid vague messages like "AutoUpdater error"
   - Use descriptive messages: "AutoUpdater encountered error"
   - Include context: "Could not write to file: permission denied"

6. **Follow Standard Message Patterns**
   - **Error**: `Could not [action]: [reason]`
   - **Success**: `[Resource] [action]ed successfully`
   - **State**: `[Resource] [state]`
   - **Progress**: `[Action]ing [resource]`

7. **Include Structured Context**
   - Always pass relevant metadata as second argument
   - Use camelCase for field names
   - Include error details, counts, IDs, or other diagnostic information

8. **Use Appropriate Log Levels**
   - `error`: Could not complete operation, system errors
   - `warn`: Potential issues, fallbacks used, deprecated usage
   - `info`: Significant events, state changes, successful operations
   - `verbose`: Detailed operational information
   - `debug`: Development debugging information
   - `silly`: Extremely detailed trace information (avoid for routine operations)

9. **Maintain PII Protection**
   - Username is automatically redacted in production unless `SHEETPILOT_LOG_USERNAME=true`
   - Do not log passwords, tokens, or sensitive data
   - Hash or redact PII when necessary

10. **Ensure Machine Parsability**
    - All logs output as single-line JSON (NDJSON format)
    - Use structured data for all contextual information
    - Avoid multi-line messages or pretty-printing in logs

## Examples

### ✅ Correct

```typescript
logger.error('Could not load credentials', { service: 'smartsheet', error: err.message });
logger.info('Database initialized successfully', { dbPath, schemaVersion: 1 });
logger.warn('Credentials not found for submission', { service: 'smartsheet' });
logger.verbose('Fetching all timesheet entries', { filter: 'pending' });
```

### ❌ Incorrect

```typescript
logger.error('Failed to load credentials');  // Passive voice
logger.info('Database initialization was successful');  // Passive voice
logger.warn('Submission: credentials not found');  // Unclear prefix
logger.debug('Getting entries');  // Vague, missing context
```

## Additional Standards

- **Living documents use declarative, present tense language** - avoid "replace" or "upgraded"
- **Build each element in isolation** - keep files small with one class per file
- **Logs are machine parsable** - track reliable selectors for future improvements
- **Ask only three questions at a time** when clarification is needed
- **Call external service interfaces "contracts"** instead of "interfaces"
- **Development scripts are exempt from maintainability analysis** - they are dev files, not core code
